
## Release 2011-08-20

  -Inchworm
      -bhaas: bugfix wrt openMP settings (thanks Nathan Weeks!)  and should now have multithreading restored.
      -bhaas: applied patches from Nathan Weeks for improved Solaris compatibility  
      -bhaas: code refinements relating to DS-mode operations

  -Chrysalis:
      -bhaas: quantifyGraph commands are now written, just like butterfly cmds and cmd_process_forker.pl is used by Trinity.pl to execute them in parallel. (requested by Mack)
      -bhaas: added progress monitoring to the ReadsToTranscripts operation, which was otherwise long-running and disconcertingly quiet.

  -cmd_process_forker.pl: 
      -bhaas: added --shuffle option so commands can be shuffled before execution

  -Trinity.pl:
      -bhaas:  runs cmd_process_forker.pl with the --shuffle option (requested by Mack)
      -bhaas:  added upfront tests for capturing java success and failure status
      -bhaas:  cmd_process_forker.pl executes the Chrysalis quantifyGraph commands in parallel (using --CPU number of simult. jobs).
      -bhaas:  added more informative error messages for Inchworm and chrysalis failures that point to documentation or specific FAQ entries.


## Release 08-15-2011-p1  (patch 1)

   -meryl:  removed the C.d files from the release; still need to update the build system to remove these on 'make clean'

## Release 08-15-2011   
   -inchworm: 
        -bhaas: incorporated Michael Ott's (ottmi) Inchworm enhancements, which greatly speed up Inchworm and reduces memory requirements in DS-mode.  ottmi is now a full-fledged Trinity developer and commits his own updates.
        -ottmi: improved multithreading using openMP
        -ottmi: minimizes hashtable lookups
        -ottmi: more operations based on fast bit manipulation rather than slower string ops.
        -ottmi: DS mode uses just as much memory as SS mode (rather than roughly 2x), since now only one of the two kmers (this, revcomp(this)) is stored in RAM.
        -ottmi: Inchworm can read in a file containing kmers in place of sequences from which kmers need be extracted (see meryl-plugin).
       	-ottmi: added dummy omp_*() functions to IRKE.cpp that allow for compilation without OpenMP
		-ottmi: Optimized kmer_to_intval(), contains_non_gatc(), and decode_kmer_from_intval()
        -ottmi: Fixed sorting issues in get_*_kmer_candidates()
		-ottmi: get_{forward|reverse}_kmer_candidates() now return Kmer_Occurence_Pair and only those kmers that actually exist
		-ottmi: merged all 3 prune_kmers_* function into a single function prune_some_kmers(). 
		-ottmi: introduced new kmer_visitor class that fixes problems with revkmers in DS mode

    	-bhaas: meryl software from kmer.sf.net is now incorporated into the Trinity suite. (based on ottmi testing and recommendation, plus ottmi-enhanced inchworm compatibility)

    -Trinity.pl wrapper: 
           -bhaas: meryl is used to obtain a table of k-mers, which Inchworm can directly read (requires the --meryl option, which we'll probably make a default setting in the future).
           -bhaas: Trinity.pl: added --min_kmer_cov, which can be set to a value greater than 1, which is useful to reduce memory requirements with very large read sets (hundreds of millions of reads). It should be left at the default (1) with smaller data sets (less than 100 million reads) for maximal sensitivity.
           -bhaas: setting max CPU to 6, as an attempt to prevent users from overloading their servers. Users that want to go higher can do so by simply modifying this script.
		   -bhaas: jaccard-clip option now compatible with both fastq and fasta-formatted reads (previously just fastq)
           -bhaas: more POSIX compliant use of 'find' command for concatenating butterfly sequence results (thanks Nathan Weeks!)

    -Chrysalis:
        -ottmi: patched GraphFromFasta such that it only stores one read at a time in memory. 
        -bhaas: added placeholder files (chrysalis/*.finished) to allow for resuming a semi-completed Chrysalis run. Also  documented Chrysalis.cc to outline key sections/stages.
        -bhaas: improved POSIX compliance (thanks Nathan Weeks!)

	-util/cmd_process_forker.pl:
		-bhaas: delete job ids from tracker after completion, should yield improved performance. (contributed by user Raj Ayyampalayam)
        -bhaas: read all bfly commands into memory rather than processing one line at a time, to avoid problems related to file system glitches resulting in a premature EOF.
        -bhaas: bugfix that now correctly collects zombies.


     -Butterfly:
        -moran: faster graph processing by additional DP/caching of intermediate path-comparison results
        -moran,bhaas: use Jaligner to track path alignments in comparisons instead of the simpler 'zipper' alignment
        -bhaas: revised menu to include 'same-path' critiria with options: --max_diffs_same_path and --min_per_align_same_path
        -moran: include node sequence range in the path reporting in the fasta header

## Release 7-13-2011
   - wrapper: made the java -Xmx 1G instead of 1000M
   - butterfly: the --compatible_path_extension is now the default behavior of butterfly (), and so removed as an option. The original behavior (slower and sometimes/rarely pathologically slow) is available as --original_path_extension
   - butterfly: faster processing of large graphs enabled by fast node-ID lookups for graph nodes.
   - butterfly: removed FPKM values from butterfly headers and simplified the accession string, header values are key/value pairs.
   - wrapper: output directory is now trinity_out_dir/ by default.
   - wrapper: Butterfly can be rerun via Trinity.pl given existing Inchworm and Chrysalis results, use --bfly_opts to try different butterfly parameters.
   - chrysalis: update avoiding integer overflow, allowing for processing of billions of reads
   - wrapper: unrecognized command-line options cause a fatal error, prevents accidental typos or not using enough dashes from leading to unintended runtime behavior.
   - wrapper: default min contig length set to 200 instead of 300; easier to filter for longer ones than to go back and rerun to get the shorter ones.
   



## Release 5-19-2011
-Butterfly updates:
     -bugfix in recursive read mapping to graph. (minor cumulative impact, but important)
     -exposed options:
              --compatible_path_extension        read (pair) must be compatible and contain defined minimum extension support for path reinforcement.
              --lenient_path_extension           only the terminal node pair(v-u) require read support
              --all_possible_paths               all edges are traversed, regardless of long-range read path support
              -R <int>                           minimum read support threshold. Default: 2
              -O <int>                           path reinforcement 'backwards overlap' distance.  Default: (-F value minus 50) Not used in --lenient_path_extension mode.
	-ascii illustrations of butterfly transcript paths and read-path pair support are included in the verbose output.
-Trinty.pl wrapper:
	-checks for java version 1.6
    -defalt butterfly setting is now --compatible_path_extension, which provides nearly identical output to the original version but is many times faster and tackles tough graphs much more easily.   Also, the default butterfly --edge-thr value is back to 0.05 (the default of Butterfly.jar).
-Inchworm and Chrysalis remain untouched.



## Release 5-13-2011
-cmd_process_forker.pl:
   -now it reaps zombies as originally intended. Zombies were harmless as far as I could tell, but they were very annoying.  Thanks to Jason Turner for pointing this out.



## Release 4-24-2011:
-Butterfly:
   -Original Zipper alignment is now back to the default setting.  JAligner pulled for now and will be restored in a future release after more rigorous testing.



## Release 4-22-2011:
-Butterfly:
   -incorporated JAligner into Butterfly for comparison of sequences derived from alternate paths that end at the same node in the graph.
   -verbose mode 5 generates .dot files for compacted graphs, and tracks progress by reporting node identifiers as it progresses through the graph.
   -source code is better organized and includes an ant build script and example data set for testing.
   -identifies fragment pairings based on ("/1", "/2", "\1", "\2", ":1", ":2") read name suffixes. (:1 and :2 are newly added).
-Inchworm and Chrysalis remain unchanged
-Trinity.pl wrapper:
    -usage info updated with pass-through options to Butterfly (--bflyHeapSpace), and java heapspace setting can be configured (--bflyHeapSpace).
    -the --CPU flag sets the number of threads for Inchworm to use, and if --run_butterfly is enabled, will run up to that number of simultaneous butterfly jobs.
    -includes an option to run an error-correction procedure on the starting fastQ files, leveraging the ALLPATHS_LG software (installed separately).  The impact of running this has not been fully explored yet, so consider it experimental for now.


