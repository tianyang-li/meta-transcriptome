!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADENINE	scaffold.c	32;"	d	file:
ADENINE	transcript.c	37;"	d	file:
BLOCK_SIZE	scaffold.c	37;"	d	file:
BLOCK_SIZE	transcript.c	42;"	d	file:
BUBBLE	transcript.c	1257;"	d	file:
CYTOSINE	scaffold.c	33;"	d	file:
CYTOSINE	transcript.c	38;"	d	file:
Connection	scaffold.c	/^typedef struct connection_st Connection;$/;"	t	typeref:struct:connection_st	file:
DEGREE_CUTOFF	scaffold.c	/^static int DEGREE_CUTOFF = 3;$/;"	v	file:
ELIMINATED	scaffold.c	1237;"	d	file:
EventType	transcript.c	/^} EventType;$/;"	t	typeref:enum:event_type	file:
FAST_TO_SLOW	correctedGraph.c	1915;"	d	file:
FORK	transcript.c	1256;"	d	file:
FUZZ	scaffold.c	1239;"	d	file:
Fmatrix	correctedGraph.c	/^static double **Fmatrix;$/;"	v	file:
Fmatrix	locallyCorrectedGraph2.c	/^static double **Fmatrix;$/;"	v	file:
GUANINE	scaffold.c	34;"	d	file:
GUANINE	transcript.c	39;"	d	file:
INDEL	correctedGraph.c	/^static const Time INDEL = 0;$/;"	v	file:
INDEL	locallyCorrectedGraph2.c	/^static const Time INDEL = 0;$/;"	v	file:
INPLAY	scaffold.c	1236;"	d	file:
K	scaffold.c	590;"	d	file:
LENGTHCUTOFF	scaffold.c	38;"	d	file:
LENGTHCUTOFF	transcript.c	43;"	d	file:
LINEAR	transcript.c	1255;"	d	file:
MAXDIVERGENCE	correctedGraph.c	/^static double MAXDIVERGENCE = 0.2;$/;"	v	file:
MAXDIVERGENCE	locallyCorrectedGraph2.c	/^static double MAXDIVERGENCE = 0.2;$/;"	v	file:
MAXGAPS	correctedGraph.c	/^static int MAXGAPS = 3;$/;"	v	file:
MAXGAPS	locallyCorrectedGraph2.c	/^static int MAXGAPS = 3;$/;"	v	file:
MAXNODELENGTH	correctedGraph.c	/^static int MAXNODELENGTH = 200;$/;"	v	file:
MAXNODELENGTH	locallyCorrectedGraph2.c	/^static int MAXNODELENGTH = 200;$/;"	v	file:
MAXREADLENGTH	correctedGraph.c	/^static int MAXREADLENGTH = 100;$/;"	v	file:
MAXREADLENGTH	locallyCorrectedGraph2.c	/^static int MAXREADLENGTH = 100;$/;"	v	file:
OASES_RELEASE_NUMBER	oases.c	/^static int OASES_RELEASE_NUMBER = 1;$/;"	v	file:
OASES_UPDATE_NUMBER	oases.c	/^static int OASES_UPDATE_NUMBER = 18;$/;"	v	file:
OASES_VERSION_NUMBER	oases.c	/^static int OASES_VERSION_NUMBER = 0;$/;"	v	file:
ReadOccurence	scaffold.c	/^typedef struct readOccurence_st ReadOccurence;$/;"	t	typeref:struct:readOccurence_st	file:
ReferenceCoord	transcript.c	/^typedef struct referenceCoord_st ReferenceCoord;$/;"	t	typeref:struct:referenceCoord_st	file:
ReferenceMapping	transcript.c	/^} ReferenceMapping; $/;"	t	typeref:struct:refMap_st	file:
SELF_LOOP_CUTOFF	locallyCorrectedGraph2.c	/^static int SELF_LOOP_CUTOFF = 0;$/;"	v	file:
SIM	correctedGraph.c	/^static const Time SIM[4][4] = {$/;"	v	file:
SIM	locallyCorrectedGraph2.c	/^static const Time SIM[4][4] = {$/;"	v	file:
SLOW_TO_FAST	correctedGraph.c	1914;"	d	file:
SPLICE_FUZZINESS	transcript.c	1522;"	d	file:
THYMINE	scaffold.c	35;"	d	file:
THYMINE	transcript.c	40;"	d	file:
TICKET_BLOCK_SIZE	correctedGraph.c	36;"	d	file:
Ticket	correctedGraph.c	/^typedef struct tkt_st Ticket;$/;"	t	typeref:struct:tkt_st	file:
UNKNOWN	transcript.c	1254;"	d	file:
UNRELIABLE_CONNECTION_CUTOFF	scaffold.c	/^static IDnum UNRELIABLE_CONNECTION_CUTOFF = 4;$/;"	v	file:
VACANT	scaffold.c	1235;"	d	file:
WORDLENGTH	correctedGraph.c	/^static int WORDLENGTH;$/;"	v	file:
WORDLENGTH	locallyCorrectedGraph2.c	/^static int WORDLENGTH = 0;$/;"	v	file:
abs_id	transcript.c	/^static IDnum abs_id(IDnum id)$/;"	f	file:
acceptorSiteAtJunction	transcript.c	/^static boolean acceptorSiteAtJunction(Node * nodeA, Node * nodeB)$/;"	f	file:
activeNode	correctedGraph.c	/^static Node *activeNode;$/;"	v	file:
add3primeForkedTranscriptsToLocus	transcript.c	/^static void add3primeForkedTranscriptsToLocus(Locus * locus)$/;"	f	file:
addBubbleTranscriptsToLocus	transcript.c	/^static void addBubbleTranscriptsToLocus(Locus * locus)$/;"	f	file:
addForkedTranscriptsToLocus	transcript.c	/^static void addForkedTranscriptsToLocus(Locus * locus)$/;"	f	file:
addLinearTranscriptToLocus	transcript.c	/^static void addLinearTranscriptToLocus(Locus * locus)$/;"	f	file:
addTranscriptToLocus	transcript.c	/^static void addTranscriptToLocus(Locus * locus, int configuration, double * scores)$/;"	f	file:
allocateConnection	scaffold.c	/^static Connection *allocateConnection()$/;"	f	file:
allocateEvent	transcript.c	/^static Event *allocateEvent()$/;"	f	file:
allocateNodeList	transcript.c	/^static NodeList *allocateNodeList()$/;"	f	file:
allocateReadToNodeTables	scaffold.c	/^static ReadOccurence **allocateReadToNodeTables(IDnum * readNodeCounts)$/;"	f	file:
allocateTranscript	transcript.c	/^static Transcript *allocateTranscript()$/;"	f	file:
alternative_3prime_splice	transcript.c	/^	alternative_3prime_splice,$/;"	e	enum:event_type	file:
alternative_5prime_splice	transcript.c	/^	alternative_5prime_splice,$/;"	e	enum:event_type	file:
alternative_polyA	transcript.c	/^	alternative_polyA,$/;"	e	enum:event_type	file:
buildScaffold	scaffold.c	/^void buildScaffold(Graph * argGraph, ReadSet * reads, boolean * dubious,$/;"	f
chooseBestPredecessor	transcript.c	/^static Node *chooseBestPredecessor(Node * node)$/;"	f	file:
chooseBestUnvisitedPredecessor	transcript.c	/^static Node *chooseBestUnvisitedPredecessor(Node * node)$/;"	f	file:
cleanLocusMemory	transcript.c	/^void cleanLocusMemory(Locus * loci, IDnum locusCount)$/;"	f
cleanScaffoldMemory	scaffold.c	/^void cleanScaffoldMemory()$/;"	f
cleanTranscriptMemory	transcript.c	/^void cleanTranscriptMemory(Locus * loci, IDnum locusCount)$/;"	f
cleanUpRedundancy	correctedGraph.c	/^static void cleanUpRedundancy()$/;"	f	file:
cleanUpRedundancy_local2	locallyCorrectedGraph2.c	/^static void cleanUpRedundancy_local2()$/;"	f	file:
clipTips	correctedGraph.c	/^void clipTips(Graph * graph)$/;"	f
clipTipsHard	correctedGraph.c	/^void clipTipsHard(Graph * graph)$/;"	f
collectReferenceCoords	transcript.c	/^static ReferenceCoord * collectReferenceCoords(char * sequencesFilename, IDnum referenceCount) {$/;"	f	file:
comparePaths	correctedGraph.c	/^static void comparePaths(Node * destination, Node * origin)$/;"	f	file:
comparePaths_local2	locallyCorrectedGraph2.c	/^static void comparePaths_local2(Node * destination, Node * origin)$/;"	f	file:
compareReferenceMappings	transcript.c	/^static int compareReferenceMappings(const void * A, const void * B) {$/;"	f	file:
compareSequences	correctedGraph.c	/^compareSequences(TightString * sequence1, TightString * sequence2)$/;"	f	file:
compareSequences	locallyCorrectedGraph2.c	/^compareSequences(TightString * sequence1, TightString * sequence2)$/;"	f	file:
computeASEvents	transcript.c	/^void computeASEvents(Locus * loci, IDnum locusCount)$/;"	f
computeDPScore	transcript.c	/^static void computeDPScore(Node * node, double *scores)$/;"	f	file:
computeHighestExpressedLocusTranscript	transcript.c	/^void computeHighestExpressedLocusTranscript(Locus * locus, double *scores)$/;"	f
computeHighlyExpressedLocusTranscripts	transcript.c	/^static void computeHighlyExpressedLocusTranscripts(Locus * locus,$/;"	f	file:
computeLocalNodeToNodeMappings	scaffold.c	/^static void computeLocalNodeToNodeMappings()$/;"	f	file:
computeLocalNodeToNodeMappingsFromConnections	scaffold.c	/^static void computeLocalNodeToNodeMappingsFromConnections(Connection *$/;"	f	file:
computeLocalNodeToNodeMappingsFromNode	scaffold.c	/^static void computeLocalNodeToNodeMappingsFromNode(Node * node)$/;"	f	file:
computeNodeToNodeMappings	scaffold.c	/^static Connection **computeNodeToNodeMappings(ReadOccurence ** readNodes,$/;"	f	file:
computePartialReadToNodeMapping	scaffold.c	/^static void computePartialReadToNodeMapping(IDnum nodeID,$/;"	f	file:
computeReadToNodeCounts	scaffold.c	/^static IDnum *computeReadToNodeCounts()$/;"	f	file:
computeReadToNodeMappings	scaffold.c	/^static ReadOccurence **computeReadToNodeMappings(IDnum * readNodeCounts)$/;"	f	file:
computeTranscripts	transcript.c	/^void computeTranscripts(Locus * loci, IDnum locusCount) {$/;"	f
concatenateCommonTodoLists	correctedGraph.c	/^static void concatenateCommonTodoLists(Node * nodeA, Node * nodeB)$/;"	f	file:
concatenateTodoListIntoActive	correctedGraph.c	/^static void concatenateTodoListIntoActive(Node * nodeB)$/;"	f	file:
concatenateTodoLists	correctedGraph.c	/^static void concatenateTodoLists(Node * nodeA, Node * nodeB)$/;"	f	file:
confidence	transcript.c	/^	double confidence;$/;"	m	struct:transcript_st	file:
connectionMemory	scaffold.c	/^static RecycleBin *connectionMemory = NULL;$/;"	v	file:
connectionMergeSort	scaffold.c	/^static void connectionMergeSort(Connection ** connectPtr, IDnum count)$/;"	f	file:
connection_st	scaffold.c	/^struct connection_st {$/;"	s	file:
contigCount	transcript.c	/^	IDnum contigCount;$/;"	m	struct:transcript_st	file:
contigs	transcript.c	/^	Node **contigs;$/;"	m	struct:transcript_st	file:
correctGraph	correctedGraph.c	/^void correctGraph(Graph * argGraph, IDnum * argSequenceLengths, Category * argSequenceCategories)$/;"	f
correctGraphLocally2	locallyCorrectedGraph2.c	/^void correctGraphLocally2(Node * argStart, Locus * locus)$/;"	f
countActiveConnections	transcript.c	/^static IDnum countActiveConnections(Node * node)$/;"	f	file:
countConnectedComponents	transcript.c	/^static IDnum countConnectedComponents(Graph * graph)$/;"	f	file:
countConnections	scaffold.c	/^static IDnum countConnections(Node * node)$/;"	f	file:
countMarkedNodes	transcript.c	/^static IDnum countMarkedNodes()$/;"	f	file:
countShortReads	scaffold.c	/^static IDnum **countShortReads(Graph * graph, Category * categories)$/;"	f	file:
createAlternativeDPStartFromNode	transcript.c	/^static void createAlternativeDPStartFromNode(Node * node, Locus * locus)$/;"	f	file:
createAlternativeDPStarts	transcript.c	/^static boolean createAlternativeDPStarts(Locus * locus)$/;"	f	file:
createAnalogousArcAndVaccinate	correctedGraph.c	/^static void createAnalogousArcAndVaccinate(Node * nodeA, Node * nodeB,$/;"	f	file:
createConnection	scaffold.c	/^static void createConnection(IDnum nodeID, IDnum node2ID,$/;"	f	file:
createNewConnection	scaffold.c	/^static Connection *createNewConnection(IDnum nodeID, IDnum node2ID,$/;"	f	file:
createTwinConnection	scaffold.c	/^static void createTwinConnection(IDnum nodeID, IDnum node2ID,$/;"	f	file:
dbgCounter	correctedGraph.c	/^static IDnum dbgCounter;$/;"	v	file:
deactivateLocalCorrectionSettings2	locallyCorrectedGraph2.c	/^void deactivateLocalCorrectionSettings2()$/;"	f
deallocateConnection	scaffold.c	/^static void deallocateConnection(Connection * connect)$/;"	f	file:
deallocateNodeList	transcript.c	/^static void deallocateNodeList(NodeList * nodeList)$/;"	f	file:
defineUniqueNodes	scaffold.c	/^static void defineUniqueNodes()$/;"	f	file:
defineUniqueness	scaffold.c	/^static void defineUniqueness(Node * node)$/;"	f	file:
destination	scaffold.c	/^	Node *destination;$/;"	m	struct:connection_st	file:
destroyConnection	scaffold.c	/^void destroyConnection(Connection * connect, IDnum nodeID)$/;"	f
destroyNodeBackConnections	transcript.c	/^static void destroyNodeBackConnections(Node * node)$/;"	f	file:
destroyPassageMarkerList	correctedGraph.c	/^static void destroyPassageMarkerList(PassageMarkerList ** list)$/;"	f	file:
destroyPaths	correctedGraph.c	/^static void destroyPaths()$/;"	f	file:
destroyPaths	locallyCorrectedGraph2.c	/^static void destroyPaths()$/;"	f	file:
determineEligibleStartingPoints	correctedGraph.c	/^static void determineEligibleStartingPoints()$/;"	f	file:
dheap	correctedGraph.c	/^static DFibHeap *dheap;$/;"	v	file:
dheap	locallyCorrectedGraph2.c	/^static DFibHeap *dheap = NULL;$/;"	v	file:
dheapNodes	correctedGraph.c	/^static DFibHeapNode **dheapNodes;$/;"	v	file:
dheapNodes	locallyCorrectedGraph2.c	/^static DFibHeapNode **dheapNodes = NULL;$/;"	v	file:
direct_count	scaffold.c	/^	IDnum direct_count;$/;"	m	struct:connection_st	file:
distance	scaffold.c	/^	double distance;$/;"	m	struct:connection_st	file:
distances	transcript.c	/^	Coordinate *distances;$/;"	m	struct:transcript_st	file:
done	correctedGraph.c	/^static Ticket *done;$/;"	v	file:
donorSiteAtJunction	transcript.c	/^static boolean donorSiteAtJunction(Node * nodeA, Node * nodeB)$/;"	f	file:
eligibleStartingPoints	correctedGraph.c	/^static IDnum *eligibleStartingPoints;$/;"	v	file:
eventMemory	transcript.c	/^static RecycleBin *eventMemory = NULL;$/;"	v	file:
event_st	transcript.c	/^struct event_st {$/;"	s	file:
event_type	transcript.c	/^typedef enum event_type {$/;"	g	file:
expectedNumberOfConnections	scaffold.c	/^static IDnum expectedNumberOfConnections(IDnum IDA, Connection * connect,$/;"	f	file:
explainedContigs	transcript.c	/^static IDnum explainedContigs(Locus * locus)$/;"	f	file:
exportAMOSContig	transcript.c	/^static void exportAMOSContig(FILE * outfile, ReadSet * reads, Transcript * transcript, $/;"	f	file:
exportAMOSLib	transcript.c	/^static void exportAMOSLib(FILE * outfile, Graph * graph, Category cat)$/;"	f	file:
exportAMOSLocus	transcript.c	/^static void exportAMOSLocus(FILE * outfile, ReadSet * reads, Locus * locus, IDnum locusID, Coordinate minTransLength,$/;"	f	file:
exportAMOSMarker	transcript.c	/^static void exportAMOSMarker(FILE * outfile, PassageMarkerI marker,$/;"	f	file:
exportAMOSRead	transcript.c	/^static void exportAMOSRead(FILE * outfile, TightString * tString,$/;"	f	file:
exportAMOSReverseShortMarker	transcript.c	/^static void exportAMOSReverseShortMarker(FILE * outfile,$/;"	f	file:
exportAMOSShortMarker	transcript.c	/^static void exportAMOSShortMarker(FILE * outfile, ShortReadMarker * marker,$/;"	f	file:
exportAMOSTranscript	transcript.c	/^static void exportAMOSTranscript(FILE* outfile, ReadSet * reads, Transcript * transcript, IDnum locusID, IDnum transcriptID, Graph * graph) $/;"	f	file:
exportAMOSTranscripts	transcript.c	/^void exportAMOSTranscripts(Graph * graph,$/;"	f
exportASEvents	transcript.c	/^void exportASEvents(Locus * loci, IDnum locusCount, char *filename)$/;"	f
exportContigOrders	transcript.c	/^void exportContigOrders(Locus * loci, IDnum locusCount, char *filename, Coordinate minTransLength)$/;"	f
exportContigSequence	transcript.c	/^static void exportContigSequence(Node * node, FILE * outfile, int *column,$/;"	f	file:
exportEvent	transcript.c	/^static void exportEvent(IDnum index, Event * event, FILE * outfile)$/;"	f	file:
exportGapSequence	transcript.c	/^static void exportGapSequence(Coordinate length, FILE * outfile,$/;"	f	file:
exportLocusASEvents	transcript.c	/^static void exportLocusASEvents(IDnum index, Locus * locus, FILE * outfile)$/;"	f	file:
exportLocusContigs	transcript.c	/^static void exportLocusContigs(IDnum locusID, Locus * locus,$/;"	f	file:
exportLocusGraph	transcript.c	/^void exportLocusGraph(FILE * file, IDnum index, Locus * loci)$/;"	f
exportLocusMapping	transcript.c	/^static void exportLocusMapping(FILE * outfile, Locus * loci, IDnum locusIndex, ReadSet * reads, ReferenceCoord * refCoords, Coordinate minTransLength, int wordLength) {$/;"	f	file:
exportLocusNode	transcript.c	/^static void exportLocusNode(IDnum index, Node * node, FILE * outfile)$/;"	f	file:
exportLocusNodes	transcript.c	/^static void exportLocusNodes(IDnum locusIndex, Locus * locus,$/;"	f	file:
exportLocusTranscripts	transcript.c	/^static void exportLocusTranscripts(Locus * locus, IDnum locusID,$/;"	f	file:
exportNodeSequence	transcript.c	/^static void exportNodeSequence(Node * node, FILE * outfile)$/;"	f	file:
exportTranscript	transcript.c	/^static void exportTranscript(Transcript * transcript, IDnum locusID,$/;"	f	file:
exportTranscriptContigs	transcript.c	/^static void exportTranscriptContigs(Transcript * transcript, IDnum locusID,$/;"	f	file:
exportTranscriptMapping	transcript.c	/^static void exportTranscriptMapping(FILE * outfile, Transcript * transcript, IDnum locusIndex, IDnum transcriptIndex, ReadSet * reads, ReferenceCoord * refCoords, int wordLength) {$/;"	f	file:
exportTranscriptMappings	transcript.c	/^void exportTranscriptMappings(Locus * loci, IDnum locusCount, $/;"	f
exportTranscripts	transcript.c	/^void exportTranscripts(Locus * loci, IDnum locusCount, char *filename, Coordinate minTransLength)$/;"	f
exportUnusedTranscriptReads	transcript.c	/^void exportUnusedTranscriptReads(Graph* graph, Locus * loci, IDnum locusCount, ReadSet * reads, Coordinate minTransLength, char* directory) {$/;"	f
expressUnexplainedLongContigs	transcript.c	/^static void expressUnexplainedLongContigs(Locus * locus) {$/;"	f	file:
extendComponent	transcript.c	/^static void extendComponent(Locus * locus)$/;"	f	file:
extendComponentFromNode	transcript.c	/^static void extendComponentFromNode(Node * node)$/;"	f	file:
extendComponentToNode	transcript.c	/^static void extendComponentToNode(Node * node)$/;"	f	file:
extractConnectedComponents	transcript.c	/^static Locus *extractConnectedComponents(IDnum locusCount)$/;"	f	file:
extractGraphLoci	transcript.c	/^Locus *extractGraphLoci(Graph * argGraph, ReadSet * reads,$/;"	f
extractLinearPath	transcript.c	/^static IDnum extractLinearPath(Node * maxNode)$/;"	f	file:
extractLocusASEvents	transcript.c	/^static void extractLocusASEvents(Locus * locus)$/;"	f	file:
extractMajorityPath	transcript.c	/^static IDnum extractMajorityPath(Node * maxNode)$/;"	f	file:
extractNodeASEvents	transcript.c	/^static void extractNodeASEvents(Node * node, Locus * locus)$/;"	f	file:
extractSequence	correctedGraph.c	/^extractSequence(PassageMarkerI path, TightString * sequence)$/;"	f	file:
extractSequence	locallyCorrectedGraph2.c	/^extractSequence(PassageMarkerI path, TightString * sequence)$/;"	f	file:
fastPath	correctedGraph.c	/^static PassageMarkerI fastPath;$/;"	v	file:
fastPath	locallyCorrectedGraph2.c	/^static PassageMarkerI fastPath = NULL_IDX;$/;"	v	file:
fastSequence	correctedGraph.c	/^static TightString *fastSequence;$/;"	v	file:
fastSequence	locallyCorrectedGraph2.c	/^static TightString *fastSequence = NULL;$/;"	v	file:
fastToSlowMapping	correctedGraph.c	/^static Coordinate *fastToSlowMapping;$/;"	v	file:
fillUpComponent	transcript.c	/^static void fillUpComponent(Node * node)$/;"	f	file:
findConnection	scaffold.c	/^static Connection *findConnection(IDnum nodeID, IDnum node2ID)$/;"	f	file:
findEndNodeInLocus	transcript.c	/^static Node *findEndNodeInLocus(Locus * locus)$/;"	f	file:
findHeaviestNonUsedNode	transcript.c	/^static Node *findHeaviestNonUsedNode(Locus * locus)$/;"	f	file:
findSecondEndNodeInLocus	transcript.c	/^static Node *findSecondEndNodeInLocus(Locus * locus)$/;"	f	file:
finish	transcript.c	/^	Coordinate finish;$/;"	m	struct:refMap_st	file:
finish	transcript.c	/^	Coordinate finish;$/;"	m	struct:referenceCoord_st	file:
finishesWithPAS	transcript.c	/^static boolean finishesWithPAS(Node * node)$/;"	f	file:
foldSymmetricalNode	correctedGraph.c	/^static void foldSymmetricalNode(Node * node)$/;"	f	file:
forcePossibleAlternativeDPStartFromNode	transcript.c	/^static boolean forcePossibleAlternativeDPStartFromNode(Node * node, Locus * locus)$/;"	f	file:
fprintfReferenceMapping	transcript.c	/^static void fprintfReferenceMapping(FILE * file, ReferenceMapping * mapping, ReferenceCoord * refCoords, int wordLength) {$/;"	f	file:
freeDoneTickets	correctedGraph.c	/^static void freeDoneTickets()$/;"	f	file:
getActiveConnection	transcript.c	/^static Connection *getActiveConnection(Node * node)$/;"	f	file:
getAnchors	correctedGraph.c	/^static PassageMarkerList *getAnchors(PassageMarkerI marker, Node * nodeA,$/;"	f	file:
getConnection	scaffold.c	/^Connection *getConnection(Node * node)$/;"	f
getConnectionBetweenNodes	scaffold.c	/^Connection *getConnectionBetweenNodes(Node * nodeA, Node * nodeB)$/;"	f
getConnectionDestination	scaffold.c	/^Node *getConnectionDestination(Connection * connect)$/;"	f
getConnectionDirectCount	scaffold.c	/^IDnum getConnectionDirectCount(Connection * connect)$/;"	f
getConnectionDistance	scaffold.c	/^Coordinate getConnectionDistance(Connection * connect)$/;"	f
getConnectionPairedCount	scaffold.c	/^IDnum getConnectionPairedCount(Connection * connect) {$/;"	f
getConnectionStatus	scaffold.c	/^boolean getConnectionStatus(Connection * connect)$/;"	f
getConnectionWeight	scaffold.c	/^double getConnectionWeight(Connection * connect)$/;"	f
getDegree	transcript.c	/^static IDnum getDegree(Node * node)$/;"	f	file:
getDegreeDistribution	transcript.c	/^static void getDegreeDistribution(Locus * locus, IDnum * distribution)$/;"	f	file:
getNextConnection	scaffold.c	/^Connection *getNextConnection(Connection * connect)$/;"	f
getNodeDHeapNode	correctedGraph.c	/^static DFibHeapNode *getNodeDHeapNode(Node * node)$/;"	f	file:
getNodePrevious	correctedGraph.c	/^static Node *getNodePrevious(Node * node)$/;"	f	file:
getNodePrevious	locallyCorrectedGraph2.c	/^static Node *getNodePrevious(Node * node)$/;"	f	file:
getNodeStringID	transcript.c	/^static void getNodeStringID(char *str, Node * node)$/;"	f	file:
getNodeTime	correctedGraph.c	/^static Time getNodeTime(Node * node)$/;"	f	file:
getNodeTime	locallyCorrectedGraph2.c	/^static Time getNodeTime(Node * node)$/;"	f	file:
getReferenceCount	transcript.c	/^static IDnum getReferenceCount(ReadSet * reads) {$/;"	f	file:
getReverseActiveConnection	transcript.c	/^static Connection *getReverseActiveConnection(Node * node)$/;"	f	file:
getReverseDegree	transcript.c	/^static IDnum getReverseDegree(Node * node)$/;"	f	file:
getReverseMarkedConnection	transcript.c	/^static Connection *getReverseMarkedConnection(Node * node)$/;"	f	file:
getSecondActiveConnection	transcript.c	/^static Connection *getSecondActiveConnection(Node * node)$/;"	f	file:
getSecondReverseActiveConnection	transcript.c	/^static Connection *getSecondReverseActiveConnection(Node * node)$/;"	f	file:
getTipLength	correctedGraph.c	/^static Coordinate getTipLength(Node * node)$/;"	f	file:
getTotalCoverage	transcript.c	/^static Coordinate getTotalCoverage(Node * node)$/;"	f	file:
getTranscriptLength	transcript.c	/^static Coordinate getTranscriptLength(Transcript * transcript) {$/;"	f	file:
graph	correctedGraph.c	/^static Graph *graph;$/;"	v	file:
graph	locallyCorrectedGraph2.c	/^static Graph *graph = NULL;$/;"	v	file:
graph	scaffold.c	/^static Graph *graph = NULL;$/;"	v	file:
graph	transcript.c	/^static Graph *graph = NULL;$/;"	v	file:
hasNoActiveConnections	transcript.c	/^static boolean hasNoActiveConnections(Node * node)$/;"	f	file:
hasPlausibleTranscripts	transcript.c	/^static boolean hasPlausibleTranscripts(IDnum * d)$/;"	f	file:
heavyNode	transcript.c	/^static Node *heavyNode = NULL;$/;"	v	file:
id_a	correctedGraph.c	/^	IDnum id_a;$/;"	m	struct:tkt_st	file:
id_b	correctedGraph.c	/^	IDnum id_b;$/;"	m	struct:tkt_st	file:
importEmptyReadSet	transcript.c	/^ReadSet *importEmptyReadSet(char *filename, Coordinate ** lengthsPtr,$/;"	f
incrementConnectionWeight	scaffold.c	/^static void incrementConnectionWeight(Connection * connect,$/;"	f	file:
initializeReferenceMapping	transcript.c	/^static void initializeReferenceMapping(ReferenceMapping * refMap, PassageMarkerI marker, Transcript * transcript, IDnum nodeIndex, Coordinate nodeOffset) {$/;"	f	file:
initializeTodoLists	correctedGraph.c	/^static void initializeTodoLists()$/;"	f	file:
intron_retention	transcript.c	/^	intron_retention,$/;"	e	enum:event_type	file:
isContigInverted	transcript.c	/^static Coordinate isContigInverted(Node * node)$/;"	f	file:
isInverted	transcript.c	/^static boolean isInverted(Locus * locus)$/;"	f	file:
isMinorityChoice	correctedGraph.c	/^static boolean isMinorityChoice(Node * node)$/;"	f	file:
isPreviousToNode	correctedGraph.c	/^static boolean isPreviousToNode(Node * previous, Node * target)$/;"	f	file:
isPreviousToNode	locallyCorrectedGraph2.c	/^static boolean isPreviousToNode(Node * previous, Node * target)$/;"	f	file:
leftHandNeighboursVisited	transcript.c	/^static boolean leftHandNeighboursVisited(Node * node)$/;"	f	file:
lookForPossibleAlternativeDPStartFromNode	transcript.c	/^static boolean lookForPossibleAlternativeDPStartFromNode(Node * node, Locus * locus)$/;"	f	file:
main	oases.c	/^int main(int argc, char **argv)$/;"	f
makeTranscriptOfNode	transcript.c	/^static void makeTranscriptOfNode(Locus * locus, Node* node) {$/;"	f	file:
mapDistancesOntoPaths	correctedGraph.c	/^static Coordinate mapDistancesOntoPaths()$/;"	f	file:
mapSlowOntoFast	correctedGraph.c	/^static void mapSlowOntoFast()$/;"	f	file:
markUsedReads	transcript.c	/^static void markUsedReads(Node * node, boolean * used)$/;"	f	file:
markedNodes	transcript.c	/^static NodeList *markedNodes;$/;"	v	file:
markerFollowsPath	correctedGraph.c	/^static boolean markerFollowsPath(PassageMarkerI marker,$/;"	f	file:
markerLeadsToArc	correctedGraph.c	/^static boolean markerLeadsToArc(PassageMarkerI marker, Node * nodeA,$/;"	f	file:
markerLeadsToNode	correctedGraph.c	/^static boolean markerLeadsToNode(PassageMarkerI marker, Node * node)$/;"	f	file:
max	correctedGraph.c	/^static Time max(Time A, Time B, Time C)$/;"	f	file:
max	locallyCorrectedGraph2.c	/^static Time max(Time A, Time B, Time C)$/;"	f	file:
maxtrans	transcript.c	/^static IDnum maxtrans = 10;$/;"	v	file:
mergeConnectionLists	scaffold.c	/^static Connection *mergeConnectionLists(Connection * left,$/;"	f	file:
mutually_exclusive_exons	transcript.c	/^	mutually_exclusive_exons,$/;"	e	enum:event_type	file:
name	transcript.c	/^	char * name;$/;"	m	struct:referenceCoord_st	file:
newQueueTicket	correctedGraph.c	/^static void newQueueTicket(IDnum id_a, IDnum id_b)$/;"	f	file:
newTicket	correctedGraph.c	/^static Ticket *newTicket()$/;"	f	file:
next	correctedGraph.c	/^	Ticket *next;$/;"	m	struct:tkt_st	file:
next	scaffold.c	/^	Connection *next;$/;"	m	struct:connection_st	file:
next	transcript.c	/^	Event *next;$/;"	m	struct:event_st	file:
next	transcript.c	/^	Transcript *next;$/;"	m	struct:transcript_st	file:
nextStartingPoint	correctedGraph.c	/^static Node *nextStartingPoint()$/;"	f	file:
nextTodoTicket	correctedGraph.c	/^static IDnum nextTodoTicket()$/;"	f	file:
nodeID	scaffold.c	/^	IDnum nodeID;$/;"	m	struct:readOccurence_st	file:
nodeListMemory	transcript.c	/^static RecycleBin *nodeListMemory = NULL;$/;"	v	file:
nodes	transcript.c	/^	Node *nodes[4];$/;"	m	struct:event_st	file:
norm	scaffold.c	/^static double norm(double X)$/;"	f	file:
normInt	scaffold.c	/^static double normInt(double X, double Y)$/;"	f	file:
offset	scaffold.c	/^	Coordinate offset;$/;"	m	struct:readOccurence_st	file:
onlyOneEndPoint	transcript.c	/^static boolean onlyOneEndPoint(Locus * locus)$/;"	f	file:
orientLoci	transcript.c	/^static void orientLoci(Locus * loci, IDnum locusCount)$/;"	f	file:
pairedThreshold	scaffold.c	/^static double pairedThreshold = 0.1;$/;"	v	file:
paired_count	scaffold.c	/^	IDnum paired_count;$/;"	m	struct:connection_st	file:
pathContainsReference	correctedGraph.c	/^static boolean pathContainsReference(PassageMarkerI path) {$/;"	f	file:
popNodeRecord	transcript.c	/^static Node *popNodeRecord()$/;"	f	file:
position	scaffold.c	/^	Coordinate position;$/;"	m	struct:readOccurence_st	file:
positive_strand	transcript.c	/^	boolean positive_strand;$/;"	m	struct:referenceCoord_st	file:
prepareGraphForLocalCorrections2	locallyCorrectedGraph2.c	/^void prepareGraphForLocalCorrections2(Graph * argGraph)$/;"	f
previous	correctedGraph.c	/^static Node **previous;$/;"	v	file:
previous	locallyCorrectedGraph2.c	/^static Node **previous = NULL;$/;"	v	file:
previous	scaffold.c	/^	Connection *previous;$/;"	m	struct:connection_st	file:
printOasesConnections	scaffold.c	/^void printOasesConnections(Category * categories)$/;"	f
printUsage	oases.c	/^static void printUsage()$/;"	f	file:
produceTranscript	transcript.c	/^static void produceTranscript(Locus * locus, IDnum nodesInList)$/;"	f	file:
progressStatus	correctedGraph.c	/^static boolean *progressStatus;$/;"	v	file:
projectFromLongRead	scaffold.c	/^static void projectFromLongRead(Node * node, PassageMarkerI marker,$/;"	f	file:
projectFromNode	scaffold.c	/^static void projectFromNode(IDnum nodeID,$/;"	f	file:
projectFromReadPair	scaffold.c	/^static void projectFromReadPair(Node * node, ReadOccurence * readOccurence,$/;"	f	file:
projectFromShortRead	scaffold.c	/^static void projectFromShortRead(Node * node,$/;"	f	file:
projectFromSingleRead	scaffold.c	/^static void projectFromSingleRead(Node * node,$/;"	f	file:
propagateComponent	transcript.c	/^static void propagateComponent(Node * node)$/;"	f	file:
propagateDP	transcript.c	/^static void propagateDP(Node * node)$/;"	f	file:
readOccurence_st	scaffold.c	/^struct readOccurence_st {$/;"	s	file:
readjustConnection	scaffold.c	/^static void readjustConnection(Connection * connect, Coordinate distance,$/;"	f	file:
recordNode	transcript.c	/^static NodeList *recordNode(Node * node)$/;"	f	file:
reduceSlowNodes	correctedGraph.c	/^static void reduceSlowNodes(PassageMarkerI slowMarker, Node * finish)$/;"	f	file:
refFinish	transcript.c	/^	Coordinate refFinish;$/;"	m	struct:refMap_st	file:
refID	transcript.c	/^	IDnum refID;$/;"	m	struct:refMap_st	file:
refMap_st	transcript.c	/^typedef struct refMap_st {$/;"	s	file:
refStart	transcript.c	/^	Coordinate refStart;$/;"	m	struct:refMap_st	file:
referenceCoord_st	transcript.c	/^struct referenceCoord_st {$/;"	s	file:
remapBackOfNodeArcsOntoNeighbour	correctedGraph.c	/^static void remapBackOfNodeArcsOntoNeighbour(Node * source, Node * target)$/;"	f	file:
remapBackOfNodeDescriptorOntoNeighbour	correctedGraph.c	/^static void remapBackOfNodeDescriptorOntoNeighbour(Node * source,$/;"	f	file:
remapBackOfNodeMarkersOntoNeighbour	correctedGraph.c	/^remapBackOfNodeMarkersOntoNeighbour(Node * source,$/;"	f	file:
remapBackOfNodeOntoNeighbour	correctedGraph.c	/^remapBackOfNodeOntoNeighbour(Node * source, PassageMarkerI sourceMarker,$/;"	f	file:
remapBackOfNodeTimesOntoNeighbour	correctedGraph.c	/^static void remapBackOfNodeTimesOntoNeighbour(Node * source, Node * target)$/;"	f	file:
remapEmptyPathArcsOntoMiddlePathSimple	correctedGraph.c	/^static void remapEmptyPathArcsOntoMiddlePathSimple(PassageMarkerI $/;"	f	file:
remapEmptyPathMarkersOntoMiddlePathDevious	correctedGraph.c	/^static void remapEmptyPathMarkersOntoMiddlePathDevious(PassageMarkerI $/;"	f	file:
remapEmptyPathMarkersOntoMiddlePathSimple	correctedGraph.c	/^static void remapEmptyPathMarkersOntoMiddlePathSimple(PassageMarkerI $/;"	f	file:
remapEmptyPathOntoMiddlePath	correctedGraph.c	/^remapEmptyPathOntoMiddlePath(PassageMarkerI emptyPath,$/;"	f	file:
remapNodeArcsOntoNeighbour	correctedGraph.c	/^static void remapNodeArcsOntoNeighbour(Node * source, Node * target)$/;"	f	file:
remapNodeArcsOntoTarget	correctedGraph.c	/^static void remapNodeArcsOntoTarget(Node * source, Node * target)$/;"	f	file:
remapNodeFibHeapReferencesOntoNode	correctedGraph.c	/^remapNodeFibHeapReferencesOntoNode(Node * source, Node * target)$/;"	f	file:
remapNodeInwardReferencesOntoNode	correctedGraph.c	/^static void remapNodeInwardReferencesOntoNode(Node * source, Node * target)$/;"	f	file:
remapNodeMarkersOntoNeighbour	correctedGraph.c	/^static void remapNodeMarkersOntoNeighbour(Node * source,$/;"	f	file:
remapNodeOntoNeighbour	correctedGraph.c	/^static void remapNodeOntoNeighbour(Node * source,$/;"	f	file:
remapNodeTimesOntoForwardMiddlePath	correctedGraph.c	/^static void remapNodeTimesOntoForwardMiddlePath(Node * source,$/;"	f	file:
remapNodeTimesOntoNeighbour	correctedGraph.c	/^static void remapNodeTimesOntoNeighbour(Node * source, Node * target)$/;"	f	file:
remapNodeTimesOntoTargetNode	correctedGraph.c	/^static void remapNodeTimesOntoTargetNode(Node * source, Node * target)$/;"	f	file:
remapNodeTimesOntoTwinMiddlePath	correctedGraph.c	/^static void remapNodeTimesOntoTwinMiddlePath(Node * source,$/;"	f	file:
removeGappedConnections	scaffold.c	/^static void removeGappedConnections()$/;"	f	file:
removeIndirectConnections	transcript.c	/^void removeIndirectConnections()$/;"	f
removeIndirectConnectionsAtIndex	transcript.c	/^static void removeIndirectConnectionsAtIndex(IDnum index)$/;"	f	file:
removeNodeFromLocus	transcript.c	/^void removeNodeFromLocus(Node * node) {$/;"	f
removeUnreliableConnections	scaffold.c	/^static void removeUnreliableConnections(Category * categories)$/;"	f	file:
renumberLocusNodes	transcript.c	/^static void renumberLocusNodes(Locus * locus) {$/;"	f	file:
resetStartingPointCounter	correctedGraph.c	/^static void resetStartingPointCounter() {$/;"	f	file:
revert	transcript.c	/^static void revert(Locus * locus)$/;"	f	file:
scaffold	scaffold.c	/^static Connection **scaffold = NULL;$/;"	v	file:
scaffold_setDegreeCutoff	scaffold.c	/^void scaffold_setDegreeCutoff(int val) {$/;"	f
scaffold_setPairedThreshold	scaffold.c	/^void scaffold_setPairedThreshold(double pairedThreshold_arg) {$/;"	f
scaffold_setUnreliableConnectionCutoff	scaffold.c	/^void scaffold_setUnreliableConnectionCutoff(IDnum val) {$/;"	f
sequenceCategories	correctedGraph.c	/^static Category *sequenceCategories;$/;"	v	file:
sequenceLengths	correctedGraph.c	/^static IDnum *sequenceLengths;$/;"	v	file:
setConnectionStatus	scaffold.c	/^void setConnectionStatus(Connection * connect, boolean status)$/;"	f
setConnectionWeight	scaffold.c	/^void setConnectionWeight(Connection * connect, double weight)$/;"	f
setDegreeCutoff	transcript.c	/^void setDegreeCutoff(int val) {$/;"	f
setLocalMaxDivergence2	locallyCorrectedGraph2.c	/^void setLocalMaxDivergence2(double value)$/;"	f
setLocalMaxGaps2	locallyCorrectedGraph2.c	/^void setLocalMaxGaps2(int value)$/;"	f
setLocalMaxReadLength2	locallyCorrectedGraph2.c	/^void setLocalMaxReadLength2(int value)$/;"	f
setLocusConnectionStatus	transcript.c	/^static void setLocusConnectionStatus(Locus * locus, boolean status)$/;"	f	file:
setLocusStatus	transcript.c	/^static void setLocusStatus(Locus * locus, boolean status)$/;"	f	file:
setMaxDivergence	correctedGraph.c	/^void setMaxDivergence(double value)$/;"	f
setMaxGaps	correctedGraph.c	/^void setMaxGaps(int value)$/;"	f
setMaxReadLength	correctedGraph.c	/^void setMaxReadLength(int value)$/;"	f
setNodeConnectionStatus	transcript.c	/^static void setNodeConnectionStatus(Node * node, boolean status)$/;"	f	file:
setNodeDHeapNode	correctedGraph.c	/^static void setNodeDHeapNode(Node * node, DFibHeapNode * dheapNode)$/;"	f	file:
setNodePrevious	correctedGraph.c	/^static void setNodePrevious(Node * previousNode, Node * node)$/;"	f	file:
setNodeTime	correctedGraph.c	/^static void setNodeTime(Node * node, Time time)$/;"	f	file:
setNodeTime	locallyCorrectedGraph2.c	/^static void setNodeTime(Node * node, Time time)$/;"	f	file:
setPairedThreshold	transcript.c	/^void setPairedThreshold(double pairedThreshold) {$/;"	f
setUnreliableConnectionCutoff_oases	transcript.c	/^void setUnreliableConnectionCutoff_oases(int val)$/;"	f
simplifyFromNode	transcript.c	/^static void simplifyFromNode(Node * node, Locus * locus) {$/;"	f	file:
simplifyLoci	transcript.c	/^static void simplifyLoci(Locus * loci, IDnum locusCount) {$/;"	f	file:
simplifyLocus	transcript.c	/^static void simplifyLocus(Locus * locus) {$/;"	f	file:
skipped_exon	transcript.c	/^	skipped_exon,$/;"	e	enum:event_type	file:
slowPath	correctedGraph.c	/^static PassageMarkerI slowPath;$/;"	v	file:
slowPath	locallyCorrectedGraph2.c	/^static PassageMarkerI slowPath = NULL_IDX;$/;"	v	file:
slowSequence	correctedGraph.c	/^static TightString *slowSequence;$/;"	v	file:
slowSequence	locallyCorrectedGraph2.c	/^static TightString *slowSequence = NULL;$/;"	v	file:
slowToFastMapping	correctedGraph.c	/^static Coordinate *slowToFastMapping;$/;"	v	file:
sortNodeConnections	scaffold.c	/^static void sortNodeConnections(IDnum index)$/;"	f	file:
sortScaffold	scaffold.c	/^static void sortScaffold()$/;"	f	file:
start	locallyCorrectedGraph2.c	/^static Node *start = NULL;$/;"	v	file:
start	transcript.c	/^	Coordinate start;$/;"	m	struct:refMap_st	file:
start	transcript.c	/^	Coordinate start;$/;"	m	struct:referenceCoord_st	file:
startingNode	correctedGraph.c	/^static Node *startingNode;$/;"	v	file:
starting_point_counter	correctedGraph.c	/^static IDnum starting_point_counter = 0;$/;"	v	file:
status	scaffold.c	/^	boolean status;$/;"	m	struct:connection_st	file:
testConnection	scaffold.c	/^static boolean testConnection(IDnum IDA, Connection * connect,$/;"	f	file:
ticketMemory	correctedGraph.c	/^static RecycleBin *ticketMemory;$/;"	v	file:
ticketQueue	correctedGraph.c	/^static Ticket *ticketQueue;$/;"	v	file:
times	correctedGraph.c	/^static Time *times;$/;"	v	file:
times	locallyCorrectedGraph2.c	/^static Time *times = NULL;$/;"	v	file:
tkt_st	correctedGraph.c	/^struct tkt_st {$/;"	s	file:
todo	correctedGraph.c	/^static Ticket **todo;$/;"	v	file:
todoLists	correctedGraph.c	/^static Ticket **todoLists;$/;"	v	file:
tourBus	correctedGraph.c	/^static void tourBus(Node * startingPoint)$/;"	f	file:
tourBusArc	correctedGraph.c	/^static void tourBusArc(Node * origin, Arc * arc, Time originTime)$/;"	f	file:
tourBusConnection_local2	locallyCorrectedGraph2.c	/^static void tourBusConnection_local2(Node * origin, Connection * connect, Time originTime)$/;"	f	file:
tourBusNode	correctedGraph.c	/^static void tourBusNode(Node * node)$/;"	f	file:
tourBusNode_local2	locallyCorrectedGraph2.c	/^static void tourBusNode_local2(Node * node)$/;"	f	file:
tourBus_local2	locallyCorrectedGraph2.c	/^static void tourBus_local2(Node * startingPoint)$/;"	f	file:
transcriptMemory	transcript.c	/^static RecycleBin *transcriptMemory = NULL;$/;"	v	file:
transcript_st	transcript.c	/^struct transcript_st {$/;"	s	file:
transitiveReduction	scaffold.c	/^void transitiveReduction()$/;"	f
transitiveReductionAtNode	scaffold.c	/^void transitiveReductionAtNode(Node * node)$/;"	f
twin	scaffold.c	/^	Connection *twin;$/;"	m	struct:connection_st	file:
type	transcript.c	/^	EventType type;$/;"	m	struct:event_st	file:
updateDistribution	transcript.c	/^static void updateDistribution(IDnum * distribution, Node * node)$/;"	f	file:
updateNodeStatus	correctedGraph.c	/^static void updateNodeStatus(Node * node)$/;"	f	file:
usedTranscriptReads	transcript.c	/^IDnum usedTranscriptReads(Graph * graph, Coordinate minTransLength, Locus * loci, IDnum locusCount) $/;"	f
variance	scaffold.c	/^	double variance;$/;"	m	struct:connection_st	file:
weight	scaffold.c	/^	double weight;$/;"	m	struct:connection_st	file:
